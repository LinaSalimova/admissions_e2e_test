{"name": "test_go_to_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: <html>\r\n<head><title>401 Authorization Required</title></head>\r\n<body bgcolor=\"white\">\r\n<center><h1>401 Authorization Required</h1></center>\r\n<hr><center>nginx/1.14.2</center>\r\n</body>\r\n</html>", "trace": "@pytest.fixture(scope='function', autouse=True)\n    def browser_opt():\n        from dotenv import load_dotenv\n        load_dotenv()\n        login = os.getenv('LOGIN')\n        password = os.getenv('PASSWORD')\n    \n        selenoid_capabilities = {\n            'browserName': 'chrome',\n            'browserVersion': '100',\n            'selenoid:options': {\n                'enableVNC': True,\n                'enableVideo': True\n            }\n        }\n    \n        browser.config.base_url = 'https://admissions.kpfu.ru/'\n        browser.config.window_height = 1080\n        browser.config.window_width = 1920\n    \n    \n        options.capabilities.update(selenoid_capabilities)\n    \n    \n>       browser.config.driver = webdriver.Remote(\n            command_executor=f'https://{login}:{password}@selenoid.autotests.cloud/wd/hub',\n            options=options\n        )\n\nconftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:205: in __init__\n    self.start_session(capabilities)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:289: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002A730434F50>\nresponse = {'status': 401, 'value': '<html>\\r\\n<head><title>401 Authorization Required</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>401 Authorization Required</h1></center>\\r\\n<hr><center>nginx/1.14.2</center>\\r\\n</body>\\r\\n</html>\\r\\n'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n>           raise exception_class(value)\nE           selenium.common.exceptions.WebDriverException: Message: <html>\r\nE           <head><title>401 Authorization Required</title></head>\r\nE           <body bgcolor=\"white\">\r\nE           <center><h1>401 Authorization Required</h1></center>\r\nE           <hr><center>nginx/1.14.2</center>\r\nE           </body>\r\nE           </html>\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:193: WebDriverException"}, "start": 1715606661340, "stop": 1715606661340, "uuid": "ae113133-b935-4530-8e30-a1c01cd316e1", "historyId": "65dc02c1c8c42540630f0e6fd67076f1", "testCaseId": "65dc02c1c8c42540630f0e6fd67076f1", "fullName": "tests.test_main_page#test_go_to_page", "labels": [{"name": "owner", "value": "Alina Salimova"}, {"name": "severity", "value": "normal"}, {"name": "tag", "value": "Web"}, {"name": "feature", "value": "Bachelor page"}, {"name": "story", "value": "Checking the training program filtering system"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main_page"}, {"name": "host", "value": "DIS-17-201-07"}, {"name": "thread", "value": "12900-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main_page"}], "links": [{"type": "link", "url": "https://admissions.kpfu.ru/", "name": "https://admissions.kpfu.ru/"}]}